// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  BUYER
  SELLER
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    @db.Text
  role          UserRole  @default(BUYER)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  purchases     Purchase[]
  orders        Order[] @relation("Seller")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  price       Float
  quantity    Int
  imageUrl    String
  sellerId    String
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Purchase {
  id          String   @id @default(cuid())
  orders      Order[]   
  buyerId     String?
  buyer       User?    @relation(fields: [buyerId], references: [id], onDelete: Cascade) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id          String   @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  purchaseId  String
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  trackingId  String?  
  status      OrderStatus @default(PENDING)
  // we'll have an id in the array for each item, if a customer purchased the same product multiple times
  productIds  String[]
  sellerId    String
  seller      User     @relation(name: "Seller", fields: [sellerId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}